version: '3.5'

x-commonenv: &commonenv
  POSTGRES_USER: web
  POSTGRES_DB: imjacinta_prod
  POSTGRES_PASSWORD_FILE: /run/secrets/dbpass
  RAILS_ENV: production
  RAILS_SERVE_STATIC_FILES: 'true'
  GCS_CREDS: /run/secrets/gcscreds

configs:
  traefik.toml.12:
    file: ./traefik.toml
  prometheus.yml:
    file: ./prometheus.yml

services:
  # Setup Rake Tasks (e.g. migrate db)
  setup:
    image: jaci/imjacinta:${IMJACINTA_VERSION}
    command: bin/rails db:migrate
    environment:
      <<: *commonenv
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    secrets:
      - dbpass
      - secretkeybase
      - gcscreds
      - master
    depends_on:
      - db
    networks:
      - backend
  # Web Service
  imjacinta:
    image: jaci/imjacinta:${IMJACINTA_VERSION}
    command: bundle exec rails s -p 3000 -b 0.0.0.0
    environment:
      <<: *commonenv
    deploy:
      replicas: 1
      update_config:
        order: start-first
      restart_policy:
        condition: any
      labels:
        - "traefik.frontend.rule=Host:imjac.in,www.imjac.in,dev.imjac.in;ReplacePathRegex: ^/internal/(.*) /404/$$1"
        - "traefik.docker.network=traefik_proxy"
        - "traefik.port=3000"
    secrets:
      - dbpass
      - secretkeybase
      - gcscreds
      - master
    healthcheck:
      test: curl --fail localhost:3000 || exit 1
      timeout: 10s
      interval: 20s
    depends_on:
      - db
      - setup
    networks:
      - proxy
      - backend
  # Traefik Setup
  traefik_setup:
    image: traefik:alpine
    command: storeconfig
    configs:
      - source: traefik.toml.12
        target: /etc/traefik/traefik.toml
    depends_on: 
      - etcd
    networks:
      - backend
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  # Reverse Proxy
  traefik:
    image: traefik:alpine
    configs:
      - source: traefik.toml.12
        target: /etc/traefik/traefik.toml
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik_acme:/acme
    networks:
      - proxy
    depends_on:
      - traefik_setup
    deploy: 
      replicas: 1
      restart_policy:
        condition: any
      placement:
        constraints: [node.role == manager]
  # Database Engine
  # TODO: Other databases need to be manually created when they're needed.
  db:
    image: postgres:9.6-alpine
    environment:
      <<: *commonenv
    secrets:
      - dbpass
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      replicas: 1
      restart_policy:
        condition: any
      placement:
        constraints: [node.role == manager]
  # Redis
  redis:
    image: redis:alpine
    environment:
      <<: *commonenv
    volumes: 
      - redis:/data
    networks:
      - backend
    deploy:
      replicas: 1
      restart_policy:
        condition: any
      placement:
        constraints: [node.role == manager]
  # Sidekiq
  sidekiq:
    image: jaci/imjacinta:${IMJACINTA_VERSION}
    command: bundle exec sidekiq
    environment:
      <<: *commonenv
    secrets:
      - master
      - dbpass
      - secretkeybase
      - gcscreds
    depends_on:
      - setup
      - redis
      - imjacinta
    networks:
      - backend
    deploy:
      replicas: 1
      restart_policy:
        condition: any
  # Mailer
  mailer:
    image: jaci/postfix:2.0
    environment:
      - DOMAIN=imjac.in
      - ETCD=etcd:2379
      - ACME_STORAGE=traefik/acme/account
    secrets:
      - opendkim_private
      - smtp_passwd
    networks:
      - backend
    deploy:
      replicas: 1
      restart_policy:
        condition: any
  # Etcd (for storing HTTPS certs)
  etcd:
    image: bitnami/etcd
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes # It's on a private backend network, no need to auth
    volumes:
      - etcd_data:/opt/bitnami
    networks:
      - backend
      - proxy
    deploy:
      replicas: 1
      restart_policy:
        condition: any
      placement:
        constraints: [node.role == manager]
  # Data analytics
  prometheus:
    image: prom/prometheus
    configs:
      - source: prometheus.yml
        target: /etc/prometheus/prometheus.yml
    networks:
      - proxy
      - backend
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  grafana:
    image: grafana/grafana
    volumes:
      - grafana:/var/lib/grafana
    depends_on:
      - prometheus
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager] # Grafana has persistent storage
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.frontend.rule=Host:metrics.imjac.in"
        - "traefik.docker.network=traefik_proxy"
        - "traefik.port=3000"
    networks:
      - proxy
      - backend
  # --- OTHER WEBAPPS ----
  curtincourses_setup:
    image: jaci/curtin-courses:547a48f
    command: bin/rails db:create db:migrate
    environment:
      <<: *commonenv
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    secrets:
      - dbpass
      - secretkeybase
      - gcscreds
      - master
    depends_on:
      - db
    networks:
      - backend
  curtincourses:
    image: jaci/curtin-courses:547a48f
    command: bundle exec rails s -p 3000 -b 0.0.0.0
    environment:
      <<: *commonenv
    deploy:
      replicas: 1
      restart_policy:
        condition: any
      labels:
        - "traefik.frontend.rule=Host:curtincourses.imjac.in"
        - "traefik.docker.network=traefik_proxy"
        - "traefik.port=3000"
    secrets:
      - dbpass
      - secretkeybase
      - gcscreds
      - master
    healthcheck:
      test: curl --fail localhost:3000 || exit 1
      timeout: 10s
      interval: 20s
    depends_on:
      - db
      - curtincourses_setup
    networks:
      - proxy
      - backend
  curtincourses_sidekiq:
    image: jaci/curtin-courses:547a48f
    command: bundle exec sidekiq
    environment:
      <<: *commonenv
    secrets:
      - master
      - dbpass
      - secretkeybase
      - gcscreds
    depends_on:
      - redis
      - curtincourses
    networks:
      - backend
    deploy:
      replicas: 1
      restart_policy:
        condition: any

   

networks:
  proxy:
    name: traefik_proxy
  backend:

volumes:
  pgdata:
  traefik_acme:
  grafana:
  redis:
  etcd_data:

secrets:
  dbpass:
    external: true
  secretkeybase:
    external: true
  gcscreds:
    external: true
  master:
    external: true
  opendkim_private:
    external: true
  smtp_passwd:
    external: true
